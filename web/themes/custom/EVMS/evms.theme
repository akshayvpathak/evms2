<?php
/**
 * @file
 * Functions to support theming in the EVSM theme.
 */
require_once('Mobile_Detect.php');
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\node\Entity\Node;
use Drupal\Component\Render\MarkupInterface;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function evms_preprocess_html(&$variables){
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

  // Page specific info.
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && isset($path_args[2]) &&
    $path_args[0] == 'taxonomy' && $path_args[1] == 'term') {
    $variables['attributes']['class'][] = 'page-taxonomy-term-' . $path_args[2];
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($path_args[2]);
    if (!empty($term)) {
      $vocabulary_id = $term->bundle();
      $variables['attributes']['class'][] = 'page-vocabulary-' . Html::cleanCssIdentifier($vocabulary_id);
    }
  }
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id) {
    $variables['attributes']['class'][] = 'page-view-' . Html::cleanCssIdentifier($view_id);
  }

  // SEO Information.
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

/**
 * Implements hook_page_attachments_alter() for page templates.
 */
function evms_page_attachments_alter(&$page) {
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function evms_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_menu_block' && isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  }
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}
/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function evms_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  // Define the view mode.
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $user_id = \Drupal::service('current_user')->id();
  $suggestions[] = 'user__' . $sanitized_view_mode;
  $suggestions[] = 'user__' . $user_id;
  $suggestions[] = 'user__' . $user_id . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page template.
 */
function evms_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add a template suggestions for node type.
  /** @var \Drupal\node\NodeInterface $node */
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    $suggestions[] = 'page__node__' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_HOOK() for form-element-label.html.twig.
 */
function evms_preprocess_form_element_label(&$variables) {
  $element = $variables['element'];
}
/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function evms_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function evms_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}
/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function evms_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}
/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function evms_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}
/**
 * Implements hook_preprocess_input() for adding classes to inputs.
 */
function evms_preprocess_input(&$variables) {
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
  if ($variables['element']['#type'] == 'submit') {
        $variables['attributes']['class'][] = 'btn';
        $variables['attributes']['class'][] = 'btn-md';
        $variables['attributes']['class'][] = 'btn-evms-submit';
        $variables['safe_value_label'] = Xss::filter($variables['attributes']['value']);
  }
}
/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function evms_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'submit') {
    $suggestions[] = 'input__submit_button';
  }
}
/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function evms_preprocess_page(&$variables) {

  $content_width = 'col';
  $sidebar_first_width = 'col-md-3';
  $sidebar_second_width = 'col-md-3';

  // Define default classes for containers.
  $variables['navbar_top_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-top'],
  ];
  $variables['navbar_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-main'],
  ];
  $variables['content_attributes'] = [
    'class' => ['main-content', $content_width],
    'id' => ['content'],
    'role' => ['main'],
  ];
  $variables['sidebar_first_attributes'] = [
    'class' => ['sidebar_first', 'sidebar', $sidebar_first_width],
    'id' => ['sidebar_first'],
  ];
  $variables['sidebar_second_attributes'] = [
    'class' => ['sidebar_second', 'sidebar', $sidebar_second_width],
    'id' => ['sidebar_second'],
  ];
      $variables['navbar_attributes']['class'][] = 'navbar-expand-lg';

  // Declare region attributes.
  $variables['navbar_top_attributes'] = new Attribute($variables['navbar_top_attributes']);
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);
  $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_first_attributes'] = new Attribute($variables['sidebar_first_attributes']);
  $variables['sidebar_second_attributes'] = new Attribute($variables['sidebar_second_attributes']);
  $variables['container'] = 'container';
}
/*Product Carousel*/
function evms_preprocess_paragraph__product_carousel(&$variables){
  $variables['attributes']['class'][] = 'product-carousel';
}
/*Product Variation  */
function evms_preprocess_commerce_product_variation__product_variaton_teaser(&$variables){
  $detect = new Mobile_Detect;
  $is_mobile = $detect->isMobile();
  $variables['is_mobile'] = $is_mobile;
}
function evms_form_alter(&$form, &$form_state, $form_id) {
  $detect = new Mobile_Detect;
  $is_mobile = $detect->isMobile();
  if(isset($form['#attributes']['class']) && in_array('commerce-order-item-variation-cart-form-form', $form['#attributes']['class']) && $is_mobile==1){
    $form['actions']['submit']['#value'] = t('ADD');
  }
}
function evms_preprocess_paragraph__banner(&$variables){
  $variables['attributes']['class'][] = 'slick-banner';
  $variables['attributes']['class'][] = 'bg-white';
}
function evms_preprocess_paragraph__categories(&$variables){
  $variables['attributes']['class'][] = 'slick-categories';
  $variables['attributes']['class'][] = 'text-center';
  $variables['attributes']['class'][] = 'bg-white';
}